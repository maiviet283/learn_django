from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseServerError
from django.contrib import messages
from django.db.models import Count
from django.core.cache import cache
from django.core.exceptions import ValidationError
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

from users.decorators import login_required_session
from products.tasks import slow_add
from .models import Book, Author


def update_author_cache(author):
    """
    C·∫≠p nh·∫≠t Redis cache cho chi ti·∫øt t√°c gi·∫£ v√† danh s√°ch t√°c gi·∫£ c√≥ s√°ch.
    """
    # C·∫≠p nh·∫≠t cache detail_author
    cache.set(
        f'detail_author_{author.id}',
        {
            'id': author.id,
            'name': author.name,
            'age': author.age,
            'created_at': author.created_at,
        },
        timeout=60
    )
    print("C·∫≠p nh·∫≠t cache detail_author")

    # C·∫≠p nh·∫≠t cache authors_has_books n·∫øu c√≥
    authors_has_books = cache.get('authors_has_books')
    if authors_has_books:
        for index, a in enumerate(authors_has_books):
            if a.id == author.id:
                a.name = author.name
                a.age = author.age
                authors_has_books[index] = a
                break
        cache.set('authors_has_books', authors_has_books, timeout=60)
        print("C·∫≠p nh·∫≠t cache authors_has_books")


@login_required_session
def book_list(request):
    """
    Hi·ªÉn th·ªã danh s√°ch t√°c gi·∫£ v√† s√°ch k√®m ph√¢n trang.
    - T·ªëi ∆∞u query b·∫±ng c√°ch ph√¢n trang ·ªü m·ª©c Database.
    - Cache t·ªïng s·ªë s√°ch v√† cache t·ª´ng trang c·ªßa danh s√°ch t√°c gi·∫£.
    """

    total_book = cache.get('total_book_author_has_book')
    if total_book is None:
        total_book = Book.objects.aggregate(total=Count('id'))['total']
        cache.set('total_book_author_has_book', total_book, timeout=60)
        print("üì¶ L·∫•y t·ªïng s·ªë s√°ch t·ª´ DB")

    # 2. T·∫°o QuerySet ph√¢n trang ·ªü DB (kh√¥ng load h·∫øt v√†o Python)
    authors_qs = Author.objects.has_books().prefetch_related('books').order_by('-book_count')

    # 3. L·∫•y s·ªë trang hi·ªán t·∫°i t·ª´ query string (?page=2)
    page_number = request.GET.get("page", 1)

    # 4. T·∫°o ƒë·ªëi t∆∞·ª£ng Paginator (5 t√°c gi·∫£/trang)
    paginator = Paginator(authors_qs, 5)

    # 5. Cache t·ª´ng trang (key: authors_page_1, authors_page_2, ...)
    cache_key = f"authors_page_{page_number}"
    page_obj = cache.get(cache_key)

    if page_obj is None:
        try:
            page_obj = paginator.get_page(page_number)  
            # Django t·ª± x·ª≠ l√Ω s·ªë trang kh√¥ng h·ª£p l·ªá
        except (EmptyPage, PageNotAnInteger):
            # N·∫øu s·ªë trang kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i s·ªë ‚Üí load trang 1
            page_obj = paginator.page(1)
        cache.set(cache_key, page_obj, timeout=60)
        print(f"üì¶ L·∫•y authors t·ª´ DB cho trang {page_number}")
    else:
        print(f"‚ö° L·∫•y authors t·ª´ cache cho trang {page_number}")

    # 6. V√≠ d·ª• ch·∫°y task Celery (async)
    # print("üì® Task Celery:", slow_add.delay(3, 4))

    return render(request, 'books/home.html', {
        "page_obj": page_obj,
        'total_book': total_book
    })


@login_required_session
def details_author(request, id):
    try:
        cache_key = f'detail_author_{id}'
        author_data = cache.get(cache_key)

        if author_data is None:
            author = get_object_or_404(Author, id=id)
            author_data = {
                'id': author.id,
                'name': author.name,
                'age': author.age,
                'created_at': author.created_at,
            }
            cache.set(cache_key, author_data, timeout=60)
            print(f"L·∫•y author t·ª´ DB: {author_data['name']}")
        else:
            print(f"‚ö° L·∫•y author t·ª´ Redis: {author_data['name']}")

        # print("detail = ",slow_add.delay(1,1))

        return render(request, 'books/details_author.html', {
            'author': author_data
        })

    except Exception as e:
        print(f"L·ªói: {e}")
        return HttpResponseServerError("L·ªói m√°y ch·ªß n·ªôi b·ªô.")


@login_required_session
def update_author(request, id):
    author = get_object_or_404(Author, id=id)

    if request.method == 'POST':
        name = request.POST.get('name', '').strip()
        age = request.POST.get('age', '').strip()

        if not name or not age.isdigit():
            messages.error(request, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c.")
            return render(request, 'books/update_author.html', {'author': author})

        try:
            author.name = name
            author.age = int(age)
            author.full_clean()
            author.save()
            messages.success(request, "C·∫≠p nh·∫≠t th√†nh c√¥ng.")

            update_author_cache(author)

            return redirect('books:details-author', id)

        except ValidationError as e:
            messages.error(request, f"L·ªói: {e}")
        except Exception as e:
            messages.error(request, f"ƒê√£ x·∫£y ra l·ªói: {e}")

    return render(request, 'books/update_author.html', {
        'author': author
    })
