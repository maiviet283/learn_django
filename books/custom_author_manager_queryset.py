from django.db import models

"""
üìò L√ù THUY·∫æT: Custom QuerySet v√† Manager trong Django
‚úÖ 1. Custom QuerySet
QuerySet l√† ƒë·ªëi t∆∞·ª£ng ƒë·∫°i di·ªán cho t·∫≠p h·ª£p c√°c b·∫£n ghi trong database.

Django cho ph√©p t·∫°o c√°c l·ªõp con c·ªßa models.QuerySet ƒë·ªÉ th√™m c√°c ph∆∞∆°ng th·ª©c l·ªçc d·ªØ li·ªáu t√πy ch·ªânh (custom filters).

Vi·ªác s·ª≠ d·ª•ng custom QuerySet gi√∫p t√°i s·ª≠ d·ª•ng logic l·ªçc/ph√¢n t√≠ch d·ªØ li·ªáu thay v√¨ vi·∫øt l·∫°i c√πng m·ªôt truy v·∫•n ·ªü nhi·ªÅu n∆°i.

‚úÖ 2. Custom Manager
Manager l√† c·ªïng truy c·∫≠p m·∫∑c ƒë·ªãnh ƒë·ªÉ thao t√°c v·ªõi database trong Django model (th∆∞·ªùng g·ªçi l√† Model.objects).

Ta c√≥ th·ªÉ ƒë·ªãnh nghƒ©a custom Manager ƒë·ªÉ d√πng c√°c ph∆∞∆°ng th·ª©c ƒë·∫∑c bi·ªát ho·∫∑c k·∫øt h·ª£p v·ªõi Custom QuerySet ƒë·ªÉ m·ªü r·ªông ch·ª©c nƒÉng c·ªßa .objects.

‚úÖ 3. K·∫øt h·ª£p QuerySet + Manager
models.Manager.from_queryset(QuerySetClass) l√† c√°ch chu·∫©n ƒë·ªÉ g·ªôp custom QuerySet v√†o Manager.

Khi ƒë√≥ ta c√≥ th·ªÉ g·ªçi tr·ª±c ti·∫øp Author.objects.adults(), Author.objects.age_between() thay v√¨ ph·∫£i chain th·ªß c√¥ng.
"""

class AuthorQuerySet(models.QuerySet):
    def adults(self, age=18):
        # Tr·∫£ v·ªÅ c√°c t√°c gi·∫£ c√≥ tu·ªïi >= age (m·∫∑c ƒë·ªãnh l√† 18)
        return self.filter(age__gte=age)
    
    def age_between(self, min_age, max_age):
        # Tr·∫£ v·ªÅ c√°c t√°c gi·∫£ c√≥ tu·ªïi n·∫±m trong kho·∫£ng min_age ƒë·∫øn max_age
        return self.filter(age__gte=min_age, age__lte=max_age)
    
    def name_contains(self, name):
        # Tr·∫£ v·ªÅ c√°c t√°c gi·∫£ c√≥ t√™n ch·ª©a chu·ªói name (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        return self.filter(name__icontains=name)

    def has_books(self):
        # Tr·∫£ v·ªÅ c√°c t√°c gi·∫£ c√≥ √≠t nh·∫•t m·ªôt cu·ªën s√°ch
        return self.annotate(book_count=models.Count('books')).filter(book_count__gt=0)

# ‚úÖ Custom Manager k·∫øt h·ª£p v·ªõi Custom QuerySet
# Cho ph√©p d√πng c√°c ph∆∞∆°ng th·ª©c tr√™n tr·ª±c ti·∫øp qua Author.objects
AuthorManager = models.Manager.from_queryset(AuthorQuerySet)
